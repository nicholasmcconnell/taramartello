{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasmcconnell/code/todo/client/src/components/layout/UpdateForm.js\";\nimport React, { useState } from 'react';\nexport default function Form(props) {\n  const [titleUpdate, setTitleUpdate] = useState(''); // const [youTubeUrl, setYouTubeUrl] = useState();\n  // const [description, setDescription] = useState();\n  // const [error, setError] = useState();\n  // const [todoSuccess, setTodoSuccess] = useState();\n\n  const {\n    title,\n    youTubeUrl,\n    description\n  } = props.props.todoList;\n\n  const submit = async e => {\n    console.log('in on submit');\n    e.preventDefault();\n\n    try {\n      // const updateTodo = { title, youTubeUrl, description }\n      console.log(titleUpdate); //     await API.createTodos(updateTodo, userData.token)\n      //         .then(res => setTodoSuccess(`Success, ${userData.user.displayName}!  Your Todo has been saved.`))\n      //         // .then API.get\n      //         .catch(err =>\n      //             (err.response.data.msg && setError(err.response.data.msg))\n      //         )\n    } catch (err) {\n      console.log(\"something when wrong\");\n    }\n  }; // console.log('in forms', title, youTubeUrl, description )\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"todo-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"todo-title\",\n    type: \"text\" // value={title}\n    ,\n    onChange: e => setTitleUpdate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"todo-youtubeurl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \"YouTube Desktop Application URL\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"todo-youtubeurl\",\n    type: \"url\",\n    value: youTubeUrl // onChange={e => props.setYouTubeUrl(e.target.value)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"todo-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"todo-description\",\n    name: \"todo-description\",\n    value: description // onChange={e => props.setDescription(e.target.value)} \n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"reset\",\n    value: \"Clear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/nicholasmcconnell/code/todo/client/src/components/layout/UpdateForm.js"],"names":["React","useState","Form","props","titleUpdate","setTitleUpdate","title","youTubeUrl","description","todoList","submit","e","console","log","preventDefault","err","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAEhC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C,CAFgC,CAGhC;AACA;AACA;AACA;;AAEA,QAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA;AAArB,MAAqCL,KAAK,CAACA,KAAN,CAAYM,QAAvD;;AAEA,QAAMC,MAAM,GAAG,MAAOC,CAAP,IAAa;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAF,IAAAA,CAAC,CAACG,cAAF;;AACA,QAAI;AACA;AAEAF,MAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ,EAHA,CAKJ;AACA;AACA;AACA;AACA;AACA;AAEC,KAZD,CAYE,OAAOW,GAAP,EAAY;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;AACJ,GAlBD,CAVgC,CA8BhC;;;AACA,sBACI,uDAEI;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,QAAQ,EAAEH,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI;AACI,IAAA,EAAE,EAAC,YADP;AAEI,IAAA,IAAI,EAAC,MAFT,CAGI;AAHJ;AAII,IAAA,QAAQ,EAAEC,CAAC,IAAIN,cAAc,CAACM,CAAC,CAACK,MAAF,CAASC,KAAV,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eASI;AAAO,IAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCATJ,eAUI;AACI,IAAA,EAAE,EAAC,iBADP;AAEI,IAAA,IAAI,EAAC,KAFT;AAGI,IAAA,KAAK,EAAEV,UAHX,CAII;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,eAiBI;AAAO,IAAA,OAAO,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjBJ,eAkBI;AACI,IAAA,EAAE,EAAC,kBADP;AAEI,IAAA,IAAI,EAAC,kBAFT;AAGI,IAAA,KAAK,EAAEC,WAHX,CAII;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,eAwBI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,KAAK,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAxBJ,CAFJ,CADJ;AAkCH","sourcesContent":["import React, { useState } from 'react'\n\nexport default function Form(props) {\n\n    const [titleUpdate, setTitleUpdate] = useState('');\n    // const [youTubeUrl, setYouTubeUrl] = useState();\n    // const [description, setDescription] = useState();\n    // const [error, setError] = useState();\n    // const [todoSuccess, setTodoSuccess] = useState();\n\n    const { title, youTubeUrl, description } = props.props.todoList;\n\n    const submit = async (e) => {\n        console.log('in on submit')\n        e.preventDefault();\n        try {\n            // const updateTodo = { title, youTubeUrl, description }\n\n            console.log(titleUpdate);\n\n        //     await API.createTodos(updateTodo, userData.token)\n        //         .then(res => setTodoSuccess(`Success, ${userData.user.displayName}!  Your Todo has been saved.`))\n        //         // .then API.get\n        //         .catch(err =>\n        //             (err.response.data.msg && setError(err.response.data.msg))\n        //         )\n\n        } catch (err) {\n            console.log(\"something when wrong\")\n        }\n    }\n\n    // console.log('in forms', title, youTubeUrl, description )\n    return (\n        <>\n        {/* {console.log(typeof title)} */}\n            <form className='form' onSubmit={submit}>\n                <label htmlFor='todo-title'>Title</label>\n                <input\n                    id='todo-title'\n                    type='text'\n                    // value={title}\n                    onChange={e => setTitleUpdate(e.target.value)}\n                ></input>\n\n                <label htmlFor='todo-youtubeurl'>YouTube Desktop Application URL</label>\n                <input\n                    id='todo-youtubeurl'\n                    type='url'\n                    value={youTubeUrl}\n                    // onChange={e => props.setYouTubeUrl(e.target.value)}\n                />\n\n                <label htmlFor='todo-description'>Description</label>\n                <textarea\n                    id='todo-description'\n                    name='todo-description'\n                    value={description} \n                    // onChange={e => props.setDescription(e.target.value)} \n                />\n                <div className='buttons-div'>\n                    <input type='submit' value='Submit' />\n                    <input type='reset' value='Clear' />\n                </div>\n            </form>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}