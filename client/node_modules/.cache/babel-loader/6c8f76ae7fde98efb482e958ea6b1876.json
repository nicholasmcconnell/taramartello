{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasmcconnell/code/todo/client/src/components/layout/UpdateForm.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport UserContext from '../../context/UserContext';\nimport API from '../../utils/todoAPI';\nimport ErrorNotice from '../misc/ErrorNotice';\nimport SuccessNotice from '../misc/SuccessNotice';\nexport default function Form(props) {\n  const {\n    title,\n    youTubeUrl,\n    description\n  } = props.props.todoList;\n  const [titleUpdate, setTitleUpdate] = useState('');\n  const [youTubeUrlUpdate, setYouTubeUrlUpdate] = useState();\n  const [descriptionUpdate, setDescriptionUpdate] = useState();\n  const [error, setError] = useState();\n  const [todoSuccess, setTodoSuccess] = useState();\n  const {\n    userData\n  } = useContext(UserContext); // useEffect(() => {\n  //     setTitleUpdate(title);\n  // })\n\n  const handleInputChange = e => {\n    // e.preventDefault();\n    console.log(e.target.value); // const { value } = e.target;\n\n    setTitleUpdate({\n      value: e.target.value\n    });\n  }; //   handleInputßßChange = titleUpdate.bind(title)\n\n\n  const submit = async e => {\n    console.log('in on submit');\n    e.preventDefault();\n\n    try {\n      const updateTodo = {\n        titleUpdate,\n        youTubeUrlUpdate,\n        descriptionUpdate\n      };\n      console.log(updateTodo);\n      await API.updateTodo(updateTodo, userData.token).then(res => setTodoSuccess(`Success, ${userData.user.displayName}!  Your Todo has been saved.`)) // .then API.get\n      .catch(err => err.response.data.msg && setError(err.response.data.msg));\n    } catch (err) {\n      console.log(\"something when wrong\");\n    }\n  }; // console.log('in forms', title, youTubeUrl, description )\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, error && /*#__PURE__*/React.createElement(ErrorNotice, {\n    message: error,\n    clearError: () => setError(undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }), todoSuccess && /*#__PURE__*/React.createElement(SuccessNotice, {\n    message: todoSuccess,\n    clearSuccess: () => {\n      setTodoSuccess(undefined); // setTitle('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"todo-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"todo-title\",\n    type: \"text\",\n    defaultValue: title,\n    onChange: e => setTitleUpdate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"todo-youtubeurl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"YouTube Desktop Application URL\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"todo-youtubeurl\",\n    type: \"url\",\n    defaultValue: youTubeUrl,\n    onChange: e => setYouTubeUrlUpdate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"todo-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"todo-description\",\n    name: \"todo-description\",\n    defaultValue: description,\n    onChange: e => setDescriptionUpdate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"reset\",\n    value: \"Clear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/nicholasmcconnell/code/todo/client/src/components/layout/UpdateForm.js"],"names":["React","useState","useEffect","useContext","UserContext","API","ErrorNotice","SuccessNotice","Form","props","title","youTubeUrl","description","todoList","titleUpdate","setTitleUpdate","youTubeUrlUpdate","setYouTubeUrlUpdate","descriptionUpdate","setDescriptionUpdate","error","setError","todoSuccess","setTodoSuccess","userData","handleInputChange","e","console","log","target","value","submit","preventDefault","updateTodo","token","then","res","user","displayName","catch","err","response","data","msg","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAEhC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA;AAArB,MAAqCH,KAAK,CAACA,KAAN,CAAYI,QAAvD;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACe,gBAAD,EAAmBC,mBAAnB,IAA0ChB,QAAQ,EAAxD;AACA,QAAM,CAACiB,iBAAD,EAAoBC,oBAApB,IAA4ClB,QAAQ,EAA1D;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,EAAlC;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,EAA9C;AAEA,QAAM;AAAEuB,IAAAA;AAAF,MAAerB,UAAU,CAACC,WAAD,CAA/B,CAVgC,CAahC;AACA;AAEA;;AAEA,QAAMqB,iBAAiB,GAAIC,CAAD,IAAO;AAC7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB,EAF6B,CAG7B;;AACAf,IAAAA,cAAc,CAAC;AAAEe,MAAAA,KAAK,EAAEJ,CAAC,CAACG,MAAF,CAASC;AAAlB,KAAD,CAAd;AACH,GALD,CAlBgC,CAyBhC;;;AAEA,QAAMC,MAAM,GAAG,MAAOL,CAAP,IAAa;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAF,IAAAA,CAAC,CAACM,cAAF;;AACA,QAAI;AACA,YAAMC,UAAU,GAAG;AAAEnB,QAAAA,WAAF;AAAeE,QAAAA,gBAAf;AAAiCE,QAAAA;AAAjC,OAAnB;AAEAS,MAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AAEA,YAAM5B,GAAG,CAAC4B,UAAJ,CAAeA,UAAf,EAA2BT,QAAQ,CAACU,KAApC,EACDC,IADC,CACIC,GAAG,IAAIb,cAAc,CAAE,YAAWC,QAAQ,CAACa,IAAT,CAAcC,WAAY,8BAAvC,CADzB,EAEF;AAFE,OAGDC,KAHC,CAGKC,GAAG,IACLA,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC,GAAlB,IAAyBtB,QAAQ,CAACmB,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC,GAAnB,CAJpC,CAAN;AAOH,KAZD,CAYE,OAAOH,GAAP,EAAY;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;AACJ,GAlBD,CA3BgC,CA+ChC;;;AACA,sBACI,uDAEI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,KAAK,iBACF,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEA,KAAtB;AAA6B,IAAA,UAAU,EAAE,MAAMC,QAAQ,CAACuB,SAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,EAKKtB,WAAW,iBACR,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEA,WAAxB;AAAqC,IAAA,YAAY,EAAE,MAAM;AACrDC,MAAAA,cAAc,CAACqB,SAAD,CAAd,CADqD,CAErD;AACH,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANR,eAYI;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,QAAQ,EAAEb,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI;AACI,IAAA,EAAE,EAAC,YADP;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,YAAY,EAAErB,KAHlB;AAII,IAAA,QAAQ,EAAEgB,CAAC,IAAIX,cAAc,CAACW,CAAC,CAACG,MAAF,CAASC,KAAV,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eASI;AAAO,IAAA,OAAO,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCATJ,eAUI;AACI,IAAA,EAAE,EAAC,iBADP;AAEI,IAAA,IAAI,EAAC,KAFT;AAGI,IAAA,YAAY,EAAEnB,UAHlB;AAII,IAAA,QAAQ,EAAEe,CAAC,IAAIT,mBAAmB,CAACS,CAAC,CAACG,MAAF,CAASC,KAAV,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,eAiBI;AAAO,IAAA,OAAO,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjBJ,eAkBI;AACI,IAAA,EAAE,EAAC,kBADP;AAEI,IAAA,IAAI,EAAC,kBAFT;AAGI,IAAA,YAAY,EAAElB,WAHlB;AAII,IAAA,QAAQ,EAAEc,CAAC,IAAIP,oBAAoB,CAACO,CAAC,CAACG,MAAF,CAASC,KAAV,CAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,eAwBI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,KAAK,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAxBJ,CAZJ,CAFJ,CADJ;AA+CH","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport UserContext from '../../context/UserContext';\nimport API from '../../utils/todoAPI';\nimport ErrorNotice from '../misc/ErrorNotice';\nimport SuccessNotice from '../misc/SuccessNotice';\n\nexport default function Form(props) {\n\n    const { title, youTubeUrl, description } = props.props.todoList;\n\n    const [titleUpdate, setTitleUpdate] = useState('');\n    const [youTubeUrlUpdate, setYouTubeUrlUpdate] = useState();\n    const [descriptionUpdate, setDescriptionUpdate] = useState();\n    const [error, setError] = useState();\n    const [todoSuccess, setTodoSuccess] = useState();\n\n    const { userData } = useContext(UserContext);\n\n\n    // useEffect(() => {\n    //     setTitleUpdate(title);\n\n    // })\n\n    const handleInputChange = (e) => {\n        // e.preventDefault();\n        console.log(e.target.value);\n        // const { value } = e.target;\n        setTitleUpdate({ value: e.target.value });\n    }\n\n    //   handleInputßßChange = titleUpdate.bind(title)\n\n    const submit = async (e) => {\n        console.log('in on submit')\n        e.preventDefault();\n        try {\n            const updateTodo = { titleUpdate, youTubeUrlUpdate, descriptionUpdate }\n\n            console.log(updateTodo);\n\n            await API.updateTodo(updateTodo, userData.token)\n                .then(res => setTodoSuccess(`Success, ${userData.user.displayName}!  Your Todo has been saved.`))\n                // .then API.get\n                .catch(err =>\n                    (err.response.data.msg && setError(err.response.data.msg))\n                )\n\n        } catch (err) {\n            console.log(\"something when wrong\")\n        }\n    }\n\n    // console.log('in forms', title, youTubeUrl, description )\n    return (\n        <>\n            {/* {console.log(typeof title)} */}\n            <div className='container'>\n                {error && (\n                    <ErrorNotice message={error} clearError={() => setError(undefined)} />\n                )}\n\n                {todoSuccess && (\n                    <SuccessNotice message={todoSuccess} clearSuccess={() => {\n                        setTodoSuccess(undefined);\n                        // setTitle('');\n                    }\n                    } />\n                )}\n                <form className='form' onSubmit={submit}>\n                    <label htmlFor='todo-title'>Title</label>\n                    <input\n                        id='todo-title'\n                        type='text'\n                        defaultValue={title}\n                        onChange={e => setTitleUpdate(e.target.value)}\n                    ></input>\n\n                    <label htmlFor='todo-youtubeurl'>YouTube Desktop Application URL</label>\n                    <input\n                        id='todo-youtubeurl'\n                        type='url'\n                        defaultValue={youTubeUrl}\n                        onChange={e => setYouTubeUrlUpdate(e.target.value)}\n                    />\n\n                    <label htmlFor='todo-description'>Description</label>\n                    <textarea\n                        id='todo-description'\n                        name='todo-description'\n                        defaultValue={description}\n                        onChange={e => setDescriptionUpdate(e.target.value)}\n                    />\n                    <div className='buttons-div'>\n                        <input type='submit' value='Submit' />\n                        <input type='reset' value='Clear' />\n                    </div>\n                </form>\n            </div>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}